{"version":3,"sources":["components/header/Header.jsx","components/spinner/Spinner.jsx","components/dollar-todays-price/DollarTodaysPrice.jsx","components/chart/backgroundColor.js","components/chart/Chart.jsx","components/form/Form.jsx","useFetch/useFetch.jsx","Pages/Home/HomePage.jsx","App.js","serviceWorker.js","index.js","assets/Logo_cumplo.svg"],"names":["Header","props","className","src","Logo","alt","Spinner","DollarTodaysPrice","loading","data","Dolares","Fecha","Valor","backgroundColor","Chart","values","dates","arrDates","Array","flat","valueToNum","map","value","parseFloat","total","reduce","sum","current","average","length","lowerPrice","Math","min","apply","higherPrice","max","useState","labels","datasets","label","borderWidth","borderColor","hoverBorderColor","hoverBorderWidth","chartData","options","title","display","text","fontSize","toFixed","Form","form","setForm","month","year","date","setDates","handleChange","e","target","name","dolar","onSubmit","preventDefault","my_string","url","axios","get","then","res","catch","err","console","log","fetchingData","type","placeholder","onChange","useFetch","defaultResponse","setData","a","fetch","json","error","useEffect","getDataFromApi","HomePage","useFetchResponse","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.9a4e0d6e.chunk.js","sourcesContent":["import React from 'react'\nimport './header.scss'\n\nimport Logo from '../../assets/Logo_cumplo.svg'\n\nconst Header = props => {\n    return (\n        <div className=\"header\">\n            <img src={Logo} alt=\"cumplo-logo\"/>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './spinner.scss'\n\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-overlay\">\n            <div className=\"spinner-container\" />\n        </div>\n    )\n}\n\nexport default Spinner\n","import React from 'react'\nimport './dollar-todays-price.scss'\n\nimport Spinner from '../spinner/Spinner'\n\nconst DollarTodaysPrice = ({ loading, data }) => {\n    return (\n        <div className=\"dollar-price text-center\">            \n            { loading ? <Spinner /> : \n                <ul className=\"list\">\n                    <li><span className=\"titles\">Date: </span>  {data.Dolares[0].Fecha}</li>\n                    <li><span className=\"titles\">Price: </span>  {data.Dolares[0].Valor} cl pesos</li>\n                </ul>    \n            }                \n        </div>\n    )\n}\n\nexport default DollarTodaysPrice\n","export const backgroundColor = [\n    'green','green','green','green','green','green',\n    'green','green','green','green','green','green',\n    'green','green','green','green','green','green',\n    'green','green','green','green', 'green'\n]","import React, { useState } from 'react'\nimport './chart.scss'\n\nimport { Bar } from 'react-chartjs-2';\nimport {backgroundColor} from './backgroundColor'\n\nconst Chart = ({ values, dates }) => {\n\n    const arrDates = dates && Array(dates).flat()\n    //Converting values string into number\n    const valueToNum = values && values.map(value => {\n        let intValue = parseFloat(value)\n        return intValue\n    })\n    //Getting the average price\n    let total = values && valueToNum.reduce((sum, current) => sum + current, 0)\n    let average = values && total/values.length\n\n    const lowerPrice = values && Math.min.apply(null, valueToNum)\n    const higherPrice = values && Math.max.apply(null, valueToNum)\n\n\n    const [chartData] = useState({\n        labels: arrDates,\n        datasets: [{\n            label: \"Dollar\",\n            data: valueToNum,\n            backgroundColor: backgroundColor,\n            borderWidth:1,\n            borderColor: '#000',\n            hoverBorderColor: 'red',\n            hoverBorderWidth: 'green'\n        }]\n    })\n\n    return (\n        <div className='chart'>\n            {\n                dates && values ? \n                    <Bar\n                        data={chartData}\n                        options={{\n                            title: {\n                                display: true,\n                                text: \"Monthly dollar's price\",\n                                fontSize: 25\n                            }\n                        }}\n                    /> : null\n            }\n            {\n                values ? (\n                    <div className=\"price\">\n                        <h6 className=\"prices\">Average price: <span className=\"price-values\">{average.toFixed(2)}</span></h6>\n                        <h6 className=\"prices\">Lower price: <span className=\"price-values\">{lowerPrice.toFixed(2)}</span></h6>\n                        <h6 className=\"prices\">Higher price: <span className=\"price-values\">{higherPrice.toFixed(2)}</span></h6>\n                    </div>\n                ) : null\n            }\n        </div>\n    )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport './form.scss'\n\nimport axios from 'axios'\n\nimport Spinner from '../spinner/Spinner'\nimport Chart from '../chart/Chart'\n\nconst Form = () => {\n    const [form, setForm] = useState({\n        data: {},\n        loading: false\n    })\n    const [date, setDates] = useState({\n        month:'',\n        year: ''\n    })\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n\n        setDates({ ...date, [name]: value});\n    }\n\n    const fetchingData = () => {\n        setForm({ ...form, loading: true })\n        const {month, year} = date\n        const apiKey = \"9c84db4d447c80c74961a72245371245cb7ac15f\"\n        if(month.length < 2 ) {\n            let my_string =\" \"\n            my_string = '0' + my_string\n        }\n        const url = `https://api.sbif.cl/api-sbifv3/recursos_api/dolar/${year}/${month}?apikey=${apiKey}&formato=json`\n\n        axios\n            .get(url)\n            .then(res => {\n                setForm({ ...form, data: res.data, loading: false })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault()\n        fetchingData()\n    }\n    \n    const { loading, data } = form\n    const { Dolares } = data\n\n    const dates = Dolares && Dolares.map(function(dolar) {\n        return dolar['Fecha'];\n    })\n\n    const values = Dolares && Dolares.map(function(dolar) {\n        return dolar['Valor'];\n    })\n\n    return (\n        <div className=\"form\">\n            <div className=\"row\">\n                <div className=\"col-12 col-md-5\">\n                    <form onSubmit={onSubmit}>\n                        <h3 className=\"title-form\">Here you can find dollar's price in the range of 2010 and 2020 by entering the month and year you want to consult</h3>\n                        <div className=\"form-group\">\n                            <label>Please enter Month </label><br/>\n                            <input \n                                type=\"number\" \n                                placeholder=\"2 digits\"\n                                onChange={handleChange}\n                                name=\"month\"                                \n                            />\n                        </div>  \n                        <div className=\"form-group\">\n                            <label>Please enter Year </label><br/>\n                            <input \n                                type=\"number\" \n                                placeholder=\"4 digits\"\n                                onChange={handleChange}\n                                name=\"year\"\n                            />\n                        </div>              \n                        <button type=\"submit\" className=\"btn btn-success mb-5\">Submit</button>\n                    </form>\n                </div>\n                <div className=\"col-12 col-md-7 text-center\">                    \n                    { loading ? <Spinner /> : <Chart dates={dates} values={values} /> }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Form\n","import {useState, useEffect} from 'react';\n\nconst useFetch = (url, defaultResponse) => {\n\n    const [data, setData] = useState(defaultResponse)\n\n    async function getDataFromApi(url) {\n        try {\n            const res = await fetch(url)\n            const data = await res.json()\n\n            setData({\n                loading: false,\n                data\n            })\n\n        } catch(err) {\n            console.error(err)\n        }\n    }\n\n    useEffect(() => {\n        getDataFromApi(url)\n    }, [url])\n\n    return data\n\n}\n\nexport default useFetch\n","import React from 'react'\nimport './home-page.scss'\n\nimport DollarTodaysPrice from '../../components/dollar-todays-price/DollarTodaysPrice'\nimport Form from '../../components/form/Form'\n\nimport useFetch from '../../useFetch/useFetch'\n\nconst HomePage = props => {\n\n    const apiKey = \"9c84db4d447c80c74961a72245371245cb7ac15f\"\n    const url = `https://api.sbif.cl/api-sbifv3/recursos_api/dolar?apikey=${apiKey}&formato=json`\n    const useFetchResponse = useFetch(url, { loading: true, data: null})\n\n    return (\n        <div className=\"home-page\">\n            <div className=\"container\">\n                <h1 className=\"text-center title\">Dollar Today's Price</h1>\n                <DollarTodaysPrice loading={useFetchResponse.loading} data={useFetchResponse.data} />\n                <Form />\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage\n","import React from 'react';\n\nimport Header from './components/header/Header'\nimport HomePage from './Pages/Home/HomePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo_cumplo.1260a8b2.svg\";"],"sourceRoot":""}